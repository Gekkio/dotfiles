if has('nvim')
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin('~/.local/share/nvim/plugged')
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin('~/.vim/plugged')
endif

" Unified tmux/vim navigation
Plug 'christoomey/vim-tmux-navigator'
" Wombat color theme
Plug 'cschlueter/vim-wombat'
" Fuzzy file searcher. Useful for finding and opening files quickly
Plug 'ctrlpvim/ctrlp.vim'
" Support for Terraform files
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }
" Snippets engine
Plug 'hrsh7th/vim-vsnip'
" Tmux integration
Plug 'jebaum/vim-tmuxify'
"
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Distraction-free writing in Vim
Plug 'junegunn/goyo.vim'
" Git commit browser
Plug 'junegunn/gv.vim', { 'on': 'GV' }
" Hyperfocus-writing in Vim
Plug 'junegunn/limelight.vim'
" Text alignment
Plug 'junegunn/vim-easy-align'
" Typescript support
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'kaarmu/typst.vim'
" Show version control status in sign column
if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif
" Support for Bluespec SystemVerilog
Plug 'mtikekar/vim-bsv', { 'for': 'bsv' }
" Improved Javascript editing (e.g. indentation)
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Markdown editing support
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
" File tree explorer
Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle' }
" Snippets
Plug 'rafamadriz/friendly-snippets'
" Rust editing support
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" OpenGL Shading Language syntax highlighting
Plug 'tikhomirov/vim-glsl', { 'for': 'glsl' }
" Comment out code easily
Plug 'tomtom/tcomment_vim'
" Display character codes in unicode/HTML/etc
Plug 'tpope/vim-characterize'
" Deep git integration with support for most common git commands
Plug 'tpope/vim-fugitive'
" Improved git syntax highlighting and support
Plug 'tpope/vim-git'
" Sensible vim defaults, which enables this vimrc to be fairly short
Plug 'tpope/vim-sensible'
" Figures out and sets indentation settings automatically
Plug 'tpope/vim-sleuth'
"
Plug 'tpope/vim-surround'
" Fairly intuitive key mappings for operation pairs
" (previous/next, up/down, etc)
Plug 'tpope/vim-unimpaired'
" Kotlin support
Plug 'udalov/kotlin-vim', { 'for': 'kotlin' }
" Very useful plugin for doing quick notes
Plug 'vimoutliner/vimoutliner', { 'for': 'votl' }
"
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
"
Plug 'zainin/vim-mikrotik', { 'for': 'rsc' }

if has('nvim')
  Plug 'neovim/nvim-lspconfig'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'hrsh7th/nvim-cmp'

  Plug 'hrsh7th/cmp-vsnip'
  Plug 'hrsh7th/vim-vsnip'
endif

call plug#end()

" === Colorscheme settings ===
"
if (has("termguicolors"))
  set termguicolors
endif
if &t_Co == 256
  try
    colorscheme wombat256
  catch /E185/
  endtry
else
  try
    colorscheme wombat
  catch /E185/
  endtry
endif

" Blink screen instead of beeping
set visualbell
" Ignore certain file patterns. Used by for example ctrl+p
set wildignore+=.svn,.git,*.o,*.jar,*.class,node_modules
" Don't litter the file system with backup files
set nobackup
" Enable mouse support
set mouse=a
" Allow hidden buffers
set hidden

set completeopt=menu,menuone,noselect

autocmd FileType rust setlocal colorcolumn=100

" === Indentation ===
"
" Default indentation is 2 spaces (but vim-sleuth will handle automatic
" detection per file)
set expandtab
set shiftwidth=2
set tabstop=2

" === vimtex plugin ===

let g:tex_flavor = 'latex'

" === vim-tmuxify plugin ===

let g:tmuxify_custom_command = 'tmux split-window -d -p 20'
let g:tmuxify_global_maps = 1

" === ctrlp plugin ===

if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

let g:ctrlp_working_path_mode = '0'

" === neovim LSP ===

if has('nvim')
lua << EOF

local lspconfig = require 'lspconfig'
local configs = require('lspconfig.configs')

local cmp = require'cmp'
local types = require'cmp.types'
cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
  }),
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'buffer' },
  },
  sorting = {
    comparators = {
      cmp.config.compare.offset,
      cmp.config.compare.exact,
      cmp.config.compare.score,
      cmp.config.compare.recently_used,
      function(entry1, entry2)
        local kind1 = entry1:get_kind()
        local kind2 = entry2:get_kind()
        if kind1 ~= kind2 then
          if kind1 == types.lsp.CompletionItemKind.Snippet then
            return false
          end
          if kind2 == types.lsp.CompletionItemKind.Snippet then
            return true
          end
        end
      end,
      cmp.config.compare.kind,
      cmp.config.compare.sort_text,
      cmp.config.compare.length,
      cmp.config.compare.order,
    },
  }
})

local on_attach = function(client, bufnr)
  local bufopts = { noremap=true, silent=true, buffer=bufnr }

  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '1gD', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', 'g0', vim.lsp.buf.document_symbol, bufopts)
  vim.keymap.set('n', 'gW', vim.lsp.buf.workspace_symbol, bufopts)
  vim.keymap.set('n', 'ga', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'ff', function() vim.lsp.buf.format { async = true } end, bufopts)
  vim.keymap.set('n', '<Leader>rn', vim.lsp.buf.rename, bufopts)
end
local capabilities = require('cmp_nvim_lsp').default_capabilities()

lspconfig.rust_analyzer.setup({
  on_attach = on_attach,
  capabilities = capabilities
})
lspconfig.vhdl_ls.setup({
  on_attach = on_attach,
  capabilities = capabilities
})
lspconfig.pylsp.setup({
  on_attach = on_attach,
  capabilities = capabilities
})

EOF
endif

" === Key mappings ===
"
" [ and ] are used in some key mappings, but they are awkward with the Finnish
" keyboard layout. ö and ä are unused, so use them instead. The key position
" is also consistent with the US layout
nmap ö [
nmap ä ]
nmap Ö {
nmap Ä }

" mapleader is used in some key mappings. Default is backslash, which is way
" too awkard with the Finnish keyboard layout
let mapleader=","
let maplocalleader=","

nnoremap <silent> <unique> <F2> :NERDTreeToggle<CR>

nnoremap <silent> <unique> <Leader>gy :Goyo<CR>

nnoremap <silent> <unique> <Leader>lili :Limelight!!<CR>
xmap <silent> <unique> <Leader>lili <Plug>(Limelight)

nmap <unique> <Leader>a <Plug>(EasyAlign)
xmap <unique> <Leader>a <Plug>(EasyAlign)

" === Local configuration

if has('nvim')
  if filereadable($HOME.'/.config/nvim/init.vim.local')
    source $HOME/.config/nvim/init.vim.local
  endif
else
  if filereadable($HOME.'/.vim/vimrc.local')
    source $HOME/.vim/vimrc.local
  endif
endif
