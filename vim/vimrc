" === Vundle initialization ===
"
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" === Plugins ===

Plugin 'gmarik/Vundle.vim'

" Unified tmux/vim navigation
Plugin 'christoomey/vim-tmux-navigator'
" Wombat color theme
Plugin 'cschlueter/vim-wombat'
" Improved Haskell support
Plugin 'dag/vim2hs'
" Ocaml indentation
Plugin 'def-lkb/ocp-indent-vim'
" Scala editing support
Plugin 'derekwyatt/vim-scala'
" Haskell ghc-mod integration
Plugin 'eagletmt/ghcmod-vim'
" Haskell completion
Plugin 'eagletmt/neco-ghc'
" Excellent git repository viewer
Plugin 'gregsexton/gitv'
" Improved Javascript syntax highlighting
Plugin 'jelera/vim-javascript-syntax'
" Fuzzy file searcher. Useful for finding and opening files quickly
Plugin 'kien/ctrlp.vim'
" Typescript support
Plugin 'leafgarland/typescript-vim'
" Javascript autocompletion and code analysis. Unpredictable, but useful when
" it works
Plugin 'marijnh/tern_for_vim'
" Tmux integration
Plugin 'mhinz/vim-tmuxify'
" Display indentation visually with colors
Plugin 'nathanaelkane/vim-indent-guides'
" Improved Javascript editing (e.g. indentation)
Plugin 'pangloss/vim-javascript'
" Markdown editing support
Plugin 'plasticboy/vim-markdown'
" Automatically add closing delimiter (e.g. '' or <>)
Plugin 'Raimondi/delimitMate'
" Integration with The Silver Searcher
Plugin 'rking/ag.vim'
" File tree explorer
Plugin 'scrooloose/nerdtree'
" Syntax checking for a multitude of languages
Plugin 'scrooloose/syntastic'
" Needed for some other plugins
Plugin 'Shougo/vimproc.vim'
" Comment out code easily
Plugin 'tomtom/tcomment_vim'
" Display character codes in unicode/HTML/etc
Plugin 'tpope/vim-characterize'
" Deep git integration with support for most common git commands
Plugin 'tpope/vim-fugitive'
" Improved git syntax highlighting and support
Plugin 'tpope/vim-git'
" Sensible vim defaults, which enables this vimrc to be fairly short
Plugin 'tpope/vim-sensible'
" Figures out and sets indentation settings automatically
Plugin 'tpope/vim-sleuth'
" Fairly intuitive key mappings for operation pairs
" (previous/next, up/down, etc)
Plugin 'tpope/vim-unimpaired'
" Much improved auto completion engine
Plugin 'Valloric/YouCompleteMe'
" Very useful plugin for doing quick notes
Plugin 'vimoutliner/vimoutliner'
" GNU global support
Plugin 'vim-scripts/gtags.vim'
" Rust editing support
Plugin 'wting/rust.vim'

call vundle#end()
filetype plugin indent on

" Blink screen instead of beeping
set visualbell
" Ignore certain file patterns. Used by for example ctrl+p
set wildignore+=.svn,.git,*.o,*.jar,*.class
" Don't litter the file system with backup files
set nobackup
" Enable mouse support
set mouse=a

" === Indentation ===
"
" Default indentation is 2 spaces (but vim-sleuth will handle automatic
" detection per file)
set expandtab
set shiftwidth=2
set tabstop=2

" === Key mappings ===
"
" [ and ] are used in some key mappings, but they are awkward with the Finnish
" keyboard layout. ö and ä are unused, so use them instead. The key position
" is also consistent with the US layout
nmap ö [
nmap ä ]
nmap Ö {
nmap Ä }

" mapleader is used in some key mappings. Default is backslash, which is way
" too awkard with the Finnish keyboard layout
let mapleader=","

" Mappings for NERD tree plugin
map <silent> <F2> :NERDTreeToggle<CR>
map <silent> <S-F2> :NERDTreeMirror<CR>

" Fix F1-F4 mappings in gnome-terminal
if $COLORTERM == "gnome-terminal"
  execute "set <F1>=\eOP"
  execute "set <F2>=\eOQ"
  execute "set <F3>=\eOR"
  execute "set <F4>=\eOS"
  execute "set <xF1>=\eO1;*P"
  execute "set <xF2>=\eO1;*Q"
  execute "set <xF3>=\eO1;*R"
  execute "set <xF4>=\eO1;*S"
endif

nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

let g:tmuxify_custom_command = 'tmux split-window -d -p 20'

" === Syntastic plugin settings ===
"
" Disable annoying java checker which breaks horribly unless you manually
" configure classpath for every single project
let g:syntastic_java_checkers = []
let g:syntastic_asm_checkers = []
" Disable annoying csslint options which are way too strict
let g:syntastic_css_csslint_args='--ignore=ids,overqualified-elements,unique-headings,adjoining-classes,box-model,qualified-headings'

" === neco-ghc plugin settings ===
"
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" === YouCompleteMe plugin settings ===
"
let g:ycm_semantic_triggers = {'haskell': ['.']}

" === Indent Guides plugin settings ===
"
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2

let omni_sql_no_default_maps=1

" === CtrlP plugin settings ===

if executable('ag')
  let g:ctrlp_user_command = 'ag -g "" -l --nocolor %s'
endif

" === Colorscheme settings ===
"
set background=dark
if &t_Co == 256
  try
    colorscheme wombat256
    if !has("gui_running")
      let g:indent_guides_auto_colors = 0
      autocmd VimEnter,ColorScheme * :hi IndentGuidesOdd guibg=#2a2a2a ctermbg=235
      autocmd VimEnter,ColorScheme * :hi IndentGuidesEven guibg=#3a3a3a ctermbg=236
    endif
  catch E185
  endtry
else
  try
    colorscheme wombat
  catch E185
  endtry
endif

" === Ocaml Merlin support ===
"
if executable('ocamlmerlin') && executable('opam')
  let s:ocamlmerlin = substitute(system('opam config var share'), '\n$', '', '''') . "/ocamlmerlin"
  execute "set rtp+=".s:ocamlmerlin."/vim"

  let g:syntastic_ocaml_checkers=['merlin']
endif

" Include .vimrc.local if it exists
if filereadable($HOME.'/.vimrc.local')
  source $HOME/.vimrc.local
endif
