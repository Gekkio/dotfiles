if has('nvim')
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin('~/.local/share/nvim/plugged')
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin('~/.vim/plugged')
endif

"
Plug 'airblade/vim-gitgutter'
"
Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
" Unified tmux/vim navigation
Plug 'christoomey/vim-tmux-navigator'
" Wombat color theme
Plug 'cschlueter/vim-wombat'
" Fuzzy file searcher. Useful for finding and opening files quickly
Plug 'ctrlpvim/ctrlp.vim'
" Excellent git repository viewer
Plug 'gregsexton/gitv'
"
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }
" Snippets
Plug 'honza/vim-snippets'
" Improved Javascript syntax highlighting
Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
" Text alignment
Plug 'junegunn/vim-easy-align'
" Typescript support
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
" Tmux integration
Plug 'mhinz/vim-tmuxify'
" Display indentation visually with colors
Plug 'nathanaelkane/vim-indent-guides'
" Improved Javascript editing (e.g. indentation)
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Markdown editing support
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
" Automatically add closing delimiter (e.g. '' or <>)
Plug 'Raimondi/delimitMate'
"
Plug 'reasonml-editor/vim-reason-plus', { 'for': 'reason' }
" Rust editing support
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" File tree explorer
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" Snippet engine
Plug 'SirVer/ultisnips'
" Needed for some other plugins
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
"
Plug 'tikhomirov/vim-glsl', { 'for': 'glsl' }
" Comment out code easily
Plug 'tomtom/tcomment_vim'
" Display character codes in unicode/HTML/etc
Plug 'tpope/vim-characterize'
" Deep git integration with support for most common git commands
Plug 'tpope/vim-fugitive'
" Improved git syntax highlighting and support
Plug 'tpope/vim-git'
" Sensible vim defaults, which enables this vimrc to be fairly short
Plug 'tpope/vim-sensible'
" Figures out and sets indentation settings automatically
Plug 'tpope/vim-sleuth'
"
Plug 'tpope/vim-surround'
" Fairly intuitive key mappings for operation pairs
" (previous/next, up/down, etc)
Plug 'tpope/vim-unimpaired'
" Kotlin support
Plug 'udalov/kotlin-vim'
" Very useful plugin for doing quick notes
Plug 'vimoutliner/vimoutliner', { 'for': 'votl' }
"
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
"
Plug 'zainin/vim-mikrotik', { 'for': 'rsc' }

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

call plug#end()

" Blink screen instead of beeping
set visualbell
" Ignore certain file patterns. Used by for example ctrl+p
set wildignore+=.svn,.git,*.o,*.jar,*.class,node_modules
" Don't litter the file system with backup files
set nobackup
" Enable mouse support
set mouse=a

" === Indentation ===
"
" Default indentation is 2 spaces (but vim-sleuth will handle automatic
" detection per file)
set expandtab
set shiftwidth=2
set tabstop=2

autocmd FileType rust setlocal colorcolumn=100

let g:LanguageClient_serverCommands = {}

if executable('rls')
  let g:LanguageClient_serverCommands.rust = ['rls']
endif

if executable('javascript-typescript-stdio')
  let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']
  let g:LanguageClient_serverCommands.typescript = ['javascript-typescript-stdio']
endif

if executable('reason-language-server.exe')
  let g:LanguageClient_serverCommands.reason = ['reason-language-server.exe']
endif

if executable('bingo')
  let g:LanguageClient_serverCommands.go = ['bingo']
endif

if executable('hie-wrapper')
  let g:LanguageClient_serverCommands.haskell = ['hie-wrapper']
endif

" === Key mappings ===
"
" [ and ] are used in some key mappings, but they are awkward with the Finnish
" keyboard layout. ö and ä are unused, so use them instead. The key position
" is also consistent with the US layout
nmap ö [
nmap ä ]
nmap Ö {
nmap Ä }

" mapleader is used in some key mappings. Default is backslash, which is way
" too awkard with the Finnish keyboard layout
let mapleader=","

" Mappings for NERD tree plugin
map <silent> <F2> :NERDTreeToggle<CR>
map <silent> <S-F2> :NERDTreeMirror<CR>

let g:tmuxify_custom_command = 'tmux split-window -d -p 20'
let g:tmuxify_global_maps = 1

" === UltiSnips plugin settings ===
"

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" === Indent Guides plugin settings ===
"
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2

let omni_sql_no_default_maps=1

" === CtrlP plugin settings ===

if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
elseif executable('ag')
  let g:ctrlp_user_command = 'ag -g "" -l --nocolor %s'
endif

" === Colorscheme settings ===
"
set background=dark
if &t_Co == 256
  try
    colorscheme wombat256
    if !has("gui_running")
      let g:indent_guides_auto_colors = 0
      autocmd VimEnter,ColorScheme * :hi IndentGuidesOdd guibg=#2a2a2a ctermbg=235
      autocmd VimEnter,ColorScheme * :hi IndentGuidesEven guibg=#3a3a3a ctermbg=236
    endif
  catch E185
  endtry
else
  try
    colorscheme wombat
  catch E185
  endtry
endif

nnoremap <F5> :call LanguageClient_contextMenu()<CR>

" === EasyAlign ===
"
xmap <unique> <Leader>a <Plug>(EasyAlign)
nmap <unique> <Leader>a <Plug>(EasyAlign)

if has('nvim')
  if filereadable($HOME.'/.config/nvim/init.vim.local')
    source $HOME/.config/nvim/init.vim.local
  endif
else
  if filereadable($HOME.'/.vim/vimrc.local')
    source $HOME/.vim/vimrc.local
  endif
endif
